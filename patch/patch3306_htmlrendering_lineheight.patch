=== modified file 'csharp/ICT/Common/Printing/GfxPrinter.cs'
--- a/csharp/ICT/Common/Printing/GfxPrinter.cs	2014-08-19 13:23:39 +0000
+++ b/csharp/ICT/Common/Printing/GfxPrinter.cs	2014-08-28 09:48:56 +0000
@@ -307,7 +307,7 @@
 
             RectangleF rect;
 
-            rect = new RectangleF(FLeftMargin, CurrentYPos, FWidth, GetFont(AFont).GetHeight(FEv.Graphics));
+            rect = new RectangleF(FLeftMargin, CurrentYPos, FWidth, GetFont(AFont).GetHeight(FEv.Graphics) * CurrentLineHeight);
 
             if (PrintingMode == ePrintingMode.eDoPrint)
             {
@@ -352,7 +352,7 @@
 
             UpdateBiggestLastUsedFont(AFont);
 
-            RectangleF rect = new RectangleF(AXPos, CurrentYPos, AWidth, GetFont(AFont).GetHeight(FEv.Graphics));
+            RectangleF rect = new RectangleF(AXPos, CurrentYPos, AWidth, GetFont(AFont).GetHeight(FEv.Graphics) * CurrentLineHeight);
 
             if (PrintingMode == ePrintingMode.eDoPrint)
             {
@@ -651,7 +651,7 @@
 
             if (ALinePosition == eLinePosition.eBelow)
             {
-                YPos = CurrentYPos + GetFont(AFont).GetHeight(FEv.Graphics);
+                YPos = CurrentYPos + GetFont(AFont).GetHeight(FEv.Graphics) * CurrentLineHeight;
             }
             else if (ALinePosition == eLinePosition.eAbove)
             {
@@ -794,7 +794,7 @@
         /// </returns>
         public override float LineFeed(eFont AFont)
         {
-            CurrentYPos = CurrentYPos + GetFont(AFont).GetHeight(FEv.Graphics);
+            CurrentYPos = CurrentYPos + GetFont(AFont).GetHeight(FEv.Graphics) * CurrentLineHeight;
             return CurrentYPos;
         }
 
@@ -809,7 +809,7 @@
                 FBiggestLastUsedFont = GetFont(eFont.eDefaultFont);
             }
 
-            CurrentYPos = CurrentYPos + FBiggestLastUsedFont.GetHeight(FEv.Graphics);
+            CurrentYPos = CurrentYPos + FBiggestLastUsedFont.GetHeight(FEv.Graphics) * CurrentLineHeight;
 
             // reset the biggest last used font
             FBiggestLastUsedFont = null;
@@ -823,7 +823,7 @@
         /// </returns>
         public override float LineSpaceFeed(eFont AFont)
         {
-            CurrentYPos = CurrentYPos + GetFont(AFont).GetHeight(FEv.Graphics) / 2;
+            CurrentYPos = CurrentYPos + GetFont(AFont).GetHeight(FEv.Graphics) / 2 * CurrentLineHeight;
             return CurrentYPos;
         }
 
@@ -834,7 +834,7 @@
         /// </returns>
         public override float LineUnFeed(eFont AFont)
         {
-            CurrentYPos = CurrentYPos - GetFont(AFont).GetHeight(FEv.Graphics);
+            CurrentYPos = CurrentYPos - GetFont(AFont).GetHeight(FEv.Graphics) * CurrentLineHeight;
             return CurrentYPos;
         }
 
@@ -849,8 +849,8 @@
             // half a line for the drawn line, to separate the report body from the footer
             if (ANumberOfLines != 0)
             {
-                FPageFooterSpace = ((float)Convert.ToDouble(ANumberOfLines) + 0.5f) * GetFont(AFont).GetHeight(FEv.Graphics) + FDefaultFont.GetHeight(
-                    FEv.Graphics);
+                FPageFooterSpace = ((float)Convert.ToDouble(ANumberOfLines) + 0.5f) * GetFont(AFont).GetHeight(FEv.Graphics) * CurrentLineHeight +
+                                   FDefaultFont.GetHeight(FEv.Graphics);
             }
         }
 
@@ -862,7 +862,7 @@
         /// <returns>void</returns>
         public override float LineFeedToPageFooter()
         {
-            CurrentYPos = FTopMargin + FHeight - FPageFooterSpace + FDefaultFont.GetHeight(FEv.Graphics);
+            CurrentYPos = FTopMargin + FHeight - FPageFooterSpace + FDefaultFont.GetHeight(FEv.Graphics) * CurrentLineHeight;
             return CurrentYPos;
         }
 
@@ -1177,7 +1177,7 @@
                 FBlackPen = new Pen(Color.Black, Cm(0.05f));
 
                 // Calculate the number of lines per page.
-                FLinesPerPage = (float)FHeight / (float)FDefaultFont.GetHeight(FEv.Graphics);
+                FLinesPerPage = (float)FHeight / (float)FDefaultFont.GetHeight(FEv.Graphics) * CurrentLineHeight;
 
                 if (FNumberOfPages == 0)
                 {

=== modified file 'csharp/ICT/Common/Printing/Printer.cs'
--- a/csharp/ICT/Common/Printing/Printer.cs	2014-08-06 15:33:53 +0000
+++ b/csharp/ICT/Common/Printing/Printer.cs	2014-08-28 09:48:56 +0000
@@ -169,6 +169,9 @@
         /// <summary>todoComment</summary>
         public eFont FCurrentFont;
 
+        /// <summary>height of line, is multiplied with the height of the font</summary>
+        public float FCurrentLineHeight = 1.0f;
+
         /// relative number; 0 is normal size
         public float FCurrentRelativeFontSize = 0;
 
@@ -190,6 +193,7 @@
             newState.FAnchorXPos = FAnchorXPos;
             newState.FAnchorYPos = FAnchorYPos;
             newState.FCurrentFont = FCurrentFont;
+            newState.FCurrentLineHeight = FCurrentLineHeight;
             newState.FCurrentRelativeFontSize = FCurrentRelativeFontSize;
             newState.FCurrentAlignment = FCurrentAlignment;
             newState.FNoWrap = FNoWrap;
@@ -372,6 +376,19 @@
             }
         }
 
+        /// <summary>1 is the normal height of the font, CurrentLineHeight is multiplied with the height of the font</summary>
+        public float CurrentLineHeight
+        {
+            get
+            {
+                return FCurrentState.FCurrentLineHeight;
+            }
+            set
+            {
+                FCurrentState.FCurrentLineHeight = value;
+            }
+        }
+
         /// <summary>
         /// the relative font size; 0 is default size
         /// </summary>

=== modified file 'csharp/ICT/Common/Printing/PrinterHtml.cs'
--- a/csharp/ICT/Common/Printing/PrinterHtml.cs	2014-07-17 14:50:29 +0000
+++ b/csharp/ICT/Common/Printing/PrinterHtml.cs	2014-08-28 09:48:56 +0000
@@ -817,6 +817,29 @@
                         Catalog.SetCulture(OrigCulture);
                     }
 
+                    if (TXMLParser.HasAttribute(curNode, "style"))
+                    {
+                        CultureInfo OrigCulture = Catalog.SetCulture(CultureInfo.InvariantCulture);
+
+                        string style = TXMLParser.GetAttribute(curNode, "style");
+                        string[] styles = style.Split(';');
+
+                        foreach (string values in styles)
+                        {
+                            if (values.Length > 0)
+                            {
+                                string[] namevaluepair = values.Split(':');
+
+                                if ((namevaluepair[0] == "line-height") && namevaluepair[1].EndsWith("%"))
+                                {
+                                    FPrinter.CurrentLineHeight = (float)Convert.ToDouble(namevaluepair[1].Replace("%", "")) / 100.0f;
+                                }
+                            }
+                        }
+
+                        Catalog.SetCulture(OrigCulture);
+                    }
+
                     if (TXMLParser.HasAttribute(curNode, "face"))
                     {
                         foreach (eFont MyFont in Enum.GetValues(typeof(eFont)))

